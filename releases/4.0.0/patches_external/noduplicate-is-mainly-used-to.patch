#    Description                  : `noduplicate` is mainly used to prevent code motion of barrier()
#                                   implementation.  However, loop unrolling is safe to igore that 
#                                   as it won't change dominance significant even that call is duplicated.


diff -Naur --strip-trailing-cr a/lib/Transforms/Scalar/LoopUnrollPass.cpp b/lib/Transforms/Scalar/LoopUnrollPass.cpp
--- a/lib/Transforms/Scalar/LoopUnrollPass.cpp	2017-10-23 09:53:04.937214744 -0400
+++ b/lib/Transforms/Scalar/LoopUnrollPass.cpp	2017-10-23 12:59:51.244775715 -0400
@@ -942,11 +942,14 @@
   unsigned LoopSize = ApproximateLoopSize(
       L, NumInlineCandidates, NotDuplicatable, Convergent, TTI, &AC, UP.BEInsns);
   DEBUG(dbgs() << "  Loop Size = " << LoopSize << "\n");
+#if 0
   if (NotDuplicatable) {
     DEBUG(dbgs() << "  Not unrolling loop which contains non-duplicatable"
                  << " instructions.\n");
     return false;
   }
+#endif 
+
   if (NumInlineCandidates != 0) {
     DEBUG(dbgs() << "  Not unrolling loop with inlinable calls.\n");
     return false;
diff -Naur --strip-trailing-cr a/lib/Transforms/Utils/LoopUnroll.cpp b/lib/Transforms/Utils/LoopUnroll.cpp
--- a/lib/Transforms/Utils/LoopUnroll.cpp	2017-10-23 09:53:04.933214744 -0400
+++ b/lib/Transforms/Utils/LoopUnroll.cpp	2017-10-23 13:00:28.564774253 -0400
@@ -262,11 +262,13 @@
     return false;
   }
 
+#if 0
   // Loops with indirectbr cannot be cloned.
   if (!L->isSafeToClone()) {
     DEBUG(dbgs() << "  Can't unroll; Loop body cannot be cloned.\n");
     return false;
   }
+#endif
 
   BasicBlock *Header = L->getHeader();
   BranchInst *BI = dyn_cast<BranchInst>(LatchBlock->getTerminator());
